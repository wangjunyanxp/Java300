Queue

1. 队列，FIFO, FILO
2. 插入、检查、移除


在处理元素前用于保存元素的 collection。除了基本的 Collection 操作外，队列还提供其他的插入、提取和检查操作。
每个方法都存在两种形式：一种抛出异常（操作失败时），另一种返回一个特殊值（null 或 false，具体取决于操作）。
插入操作的后一种形式是用于专门为有容量限制的 Queue 实现设计的；在大多数实现中，插入操作不会失败。

 抛出异常 返回特殊值
插入 add(e) offer(e)
移除 remove() poll()
检查 element() peek()

队列通常（但并非一定）以 FIFO（先进先出）的方式排序各个元素。不过优先级队列和 LIFO 队列（或堆栈）例外，
前者根据提供的比较器或元素的自然顺序对元素进行排序，后者按 LIFO（后进先出）的方式对元素进行排序。
无论使用哪种排序方式，队列的头 都是调用 remove() 或 poll() 所移除的元素。
在 FIFO 队列中，所有的新元素都插入队列的末尾。
其他种类的队列可能使用不同的元素放置规则。每个 Queue 实现必须指定其顺序属性。


Interface: java.util.Queue

所有已知实现类：
    AbstractQueue, ArrayBlockingQueue, ArrayDeque,
    ConcurrentLinkedQueue, DelayQueue, LinkedBlockingDeque,
    LinkedBlockingQueue, LinkedList, PriorityBlockingQueue,
    PriorityQueue, SynchronousQueue

    ArrayDeque
    LinkedList

------------------------------------------------------------------------------------------------------------
用到栈的地方
1. 递归
2. 浏览器的后退历史

------------------------------------------------------------------------------------------------------------


Deque
public interface Deque<E>extends Queue<E>一个线性 collection，支持在两端插入和移除元素。名称 deque 是“double ended queue（双端队列）”的缩写，通常读为“deck”。大多数 Deque 实现对于它们能够包含的元素数没有固定限制，但此接口既支持有容量限制的双端队列，也支持没有固定大小限制的双端队列。

此接口定义在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（null 或 false，具体取决于操作）。插入操作的后一种形式是专为使用有容量限制的 Deque 实现设计的；在大多数实现中，插入操作不能失败。

下表总结了上述 12 种方法：

 第一个元素（头部） 最后一个元素（尾部）
 抛出异常 特殊值 抛出异常 特殊值
插入 addFirst(e) offerFirst(e) addLast(e) offerLast(e)
移除 removeFirst() pollFirst() removeLast() pollLast()
检查 getFirst() peekFirst() getLast() peekLast()


此接口扩展了 Queue 接口。
在将双端队列用作队列时，将得到 FIFO（先进先出）行为。
将元素添加到双端队列的末尾，从双端队列的开头移除元素。从 Queue 接口继承的方法完全等效于 Deque 方法，如下表所示：

Queue 方法 等效 Deque 方法
add(e) addLast(e)
offer(e) offerLast(e)
remove() removeFirst()
poll() pollFirst()
element() getFirst()
peek() peekFirst()


双端队列也可用作 LIFO（后进先出）堆栈。
应优先使用此接口而不是遗留 Stack 类。
在将双端队列用作堆栈时，元素被推入双端队列的开头并从双端队列开头弹出。堆栈方法完全等效于 Deque 方法，如下表所示：

堆栈方法 等效 Deque 方法
push(e) addFirst(e)
pop() removeFirst()
peek() peekFirst()


注意，在将双端队列用作队列或堆栈时，peek 方法同样正常工作；无论哪种情况下，都从双端队列的开头抽取元素。

所有已知实现类：
    ArrayDeque, LinkedBlockingDeque, LinkedList
    ArrayDeque
    LinkedList

